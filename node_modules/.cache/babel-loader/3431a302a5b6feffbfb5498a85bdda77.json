{"ast":null,"code":"import { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, LOGOUT_REQUEST, LOGOUT_SUCCESS, LOGOUT_FAILURE, VERIFY_REQUEST, VERIFY_SUCCESS, ADD_PRODUCT } from \"../actions/\";\nexport default ((state = {\n  isLoggingIn: false,\n  isLoggingOut: false,\n  isVerifying: false,\n  loginError: false,\n  logoutError: false,\n  isAuthenticated: false,\n  user: {},\n  products: []\n}, action) => {\n  switch (action.type) {\n    case ADD_PRODUCT:\n      console.log(action);\n      const updatedProducts = state.products.concat(action.productinfo); // this.setState({ products: updatedProducts })\n\n      return { ...state,\n        products: updatedProducts\n      };\n      break;\n\n    case LOGIN_REQUEST:\n      return { ...state,\n        isLoggingIn: true,\n        loginError: false\n      };\n\n    case LOGIN_SUCCESS:\n      return { ...state,\n        isLoggingIn: false,\n        isAuthenticated: true,\n        user: action.user\n      };\n\n    case LOGIN_FAILURE:\n      return { ...state,\n        isLoggingIn: false,\n        isAuthenticated: false,\n        loginError: true\n      };\n\n    case LOGOUT_REQUEST:\n      return { ...state,\n        isLoggingOut: true,\n        logoutError: false\n      };\n\n    case LOGOUT_SUCCESS:\n      return { ...state,\n        isLoggingOut: false,\n        isAuthenticated: false,\n        user: {}\n      };\n\n    case LOGOUT_FAILURE:\n      return { ...state,\n        isLoggingOut: false,\n        logoutError: true\n      };\n\n    case VERIFY_REQUEST:\n      return { ...state,\n        isVerifying: true,\n        verifyingError: false\n      };\n\n    case VERIFY_SUCCESS:\n      return { ...state,\n        isVerifying: false\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/test/Documents/farmerbidderl/farmerbidder/farmerbidder/src/reducers/auth.js"],"names":["LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_FAILURE","VERIFY_REQUEST","VERIFY_SUCCESS","ADD_PRODUCT","state","isLoggingIn","isLoggingOut","isVerifying","loginError","logoutError","isAuthenticated","user","products","action","type","console","log","updatedProducts","concat","productinfo","verifyingError"],"mappings":"AAAA,SACEA,aADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,cAJF,EAKEC,cALF,EAMEC,cANF,EAOEC,cAPF,EAQEC,cARF,EASEC,WATF,QAUO,aAVP;AAYA,gBAAe,CACbC,KAAK,GAAG;AACNC,EAAAA,WAAW,EAAE,KADP;AAENC,EAAAA,YAAY,EAAE,KAFR;AAGNC,EAAAA,WAAW,EAAE,KAHP;AAINC,EAAAA,UAAU,EAAE,KAJN;AAKNC,EAAAA,WAAW,EAAE,KALP;AAMNC,EAAAA,eAAe,EAAE,KANX;AAONC,EAAAA,IAAI,EAAE,EAPA;AAQNC,EAAAA,QAAQ,EAAC;AARH,CADK,EAWbC,MAXa,KAYV;AACH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,WAAL;AACEY,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,YAAMI,eAAe,GAAGb,KAAK,CAACQ,QAAN,CAAeM,MAAf,CAAsBL,MAAM,CAACM,WAA7B,CAAxB,CAFF,CAGE;;AACA,aAAO,EAAC,GAAGf,KAAJ;AAAWQ,QAAAA,QAAQ,EAAEK;AAArB,OAAP;AAEA;;AACF,SAAKtB,aAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELC,QAAAA,WAAW,EAAE,IAFR;AAGLG,QAAAA,UAAU,EAAE;AAHP,OAAP;;AAKF,SAAKZ,aAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELC,QAAAA,WAAW,EAAE,KAFR;AAGLK,QAAAA,eAAe,EAAE,IAHZ;AAILC,QAAAA,IAAI,EAAEE,MAAM,CAACF;AAJR,OAAP;;AAMF,SAAKd,aAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELC,QAAAA,WAAW,EAAE,KAFR;AAGLK,QAAAA,eAAe,EAAE,KAHZ;AAILF,QAAAA,UAAU,EAAE;AAJP,OAAP;;AAMF,SAAKV,cAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELE,QAAAA,YAAY,EAAE,IAFT;AAGLG,QAAAA,WAAW,EAAE;AAHR,OAAP;;AAKF,SAAKV,cAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELE,QAAAA,YAAY,EAAE,KAFT;AAGLI,QAAAA,eAAe,EAAE,KAHZ;AAILC,QAAAA,IAAI,EAAE;AAJD,OAAP;;AAMF,SAAKX,cAAL;AACE,aAAO,EACL,GAAGI,KADE;AAELE,QAAAA,YAAY,EAAE,KAFT;AAGLG,QAAAA,WAAW,EAAE;AAHR,OAAP;;AAKF,SAAKR,cAAL;AACE,aAAO,EACL,GAAGG,KADE;AAELG,QAAAA,WAAW,EAAE,IAFR;AAGLa,QAAAA,cAAc,EAAE;AAHX,OAAP;;AAKF,SAAKlB,cAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELG,QAAAA,WAAW,EAAE;AAFR,OAAP;;AAIF;AACE,aAAOH,KAAP;AA3DJ;AA6DD,CA1ED","sourcesContent":["import {\n  LOGIN_REQUEST,\n  LOGIN_SUCCESS,\n  LOGIN_FAILURE,\n  LOGOUT_REQUEST,\n  LOGOUT_SUCCESS,\n  LOGOUT_FAILURE,\n  VERIFY_REQUEST,\n  VERIFY_SUCCESS,\n  ADD_PRODUCT\n} from \"../actions/\";\n\nexport default (\n  state = {\n    isLoggingIn: false,\n    isLoggingOut: false,\n    isVerifying: false,\n    loginError: false,\n    logoutError: false,\n    isAuthenticated: false,\n    user: {},\n    products:[]\n  },\n  action\n) => {\n  switch (action.type) {\n    case ADD_PRODUCT:\n      console.log(action)\n      const updatedProducts = state.products.concat(action.productinfo);\n      // this.setState({ products: updatedProducts })\n      return {...state, products: updatedProducts}\n      \n      break;\n    case LOGIN_REQUEST:\n      return {\n        ...state,\n        isLoggingIn: true,\n        loginError: false\n      };\n    case LOGIN_SUCCESS:\n      return {\n        ...state,\n        isLoggingIn: false,\n        isAuthenticated: true,\n        user: action.user\n      };\n    case LOGIN_FAILURE:\n      return {\n        ...state,\n        isLoggingIn: false,\n        isAuthenticated: false,\n        loginError: true\n      };\n    case LOGOUT_REQUEST:\n      return {\n        ...state,\n        isLoggingOut: true,\n        logoutError: false\n      };\n    case LOGOUT_SUCCESS:\n      return {\n        ...state,\n        isLoggingOut: false,\n        isAuthenticated: false,\n        user: {}\n      };\n    case LOGOUT_FAILURE:\n      return {\n        ...state,\n        isLoggingOut: false,\n        logoutError: true\n      };\n    case VERIFY_REQUEST:\n      return {\n        ...state,\n        isVerifying: true,\n        verifyingError: false\n      };\n    case VERIFY_SUCCESS:\n      return {\n        ...state,\n        isVerifying: false\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}